{
  "name": "metalogger",
  "description": "Node.js logging for grown-ups: a versatile logging wrapper that leaves you the choice, but removes the pain. Inspired by Apache Commons Logging",
  "version": "0.1.9",
  "license": {
    "type": "MIT",
    "url": "https://github.com/publicmediaplatform/metalogger/blob/master/LICENSE"
  },
  "author": {
    "name": "Irakli Nadareishvili",
    "email": "irakli@gmail.com"
  },
  "contributors": [
    {
      "name": "John Nelson",
      "email": "john@catchjohn.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/publicmediaplatform/metalogger.git"
  },
  "main": "./lib/metalogger.js",
  "dependencies": {
    "callsite": "*",
    "log": "*",
    "npmlog": "*"
  },
  "devDependencies": {
    "assert": "*",
    "should": "*",
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "## What is MetaLogger?\n\nMetalogger is a versatile logging library for Node.js that provides following features:\n\n1. Granular, Linux Syslog-compatible logging levels.\n2. Pluggable logging infrastructure (implemented: npmlog, log.js, util-based logging).\n3. Timestamps for all log messages\n4. Filename and line-numbers for all log messages!\n5. Granular logging control: alter global logging threshhold for specific files.\n6. Application-development-friendly configuration\n \n\n## Why Should You Use it?\n\nWell, being able to see the filename and line number where logs were fired is awesome! But also:\n\nTL;DR: [NodejsReactions Animated Gif](http://nodejsreactions.tumblr.com/post/56061993138/when-a-dependency-starts-writing-to-stdout)\n\nIf you are familiar with [Apache Commons Logging](http://commons.apache.org/proper/commons-logging/) then you know \nwhy Node.js needs Metalogger, if not: keep reading.\n\nNode.js is famous for its modular architecture. However, every module developer can have his or her own  preference \nto which logging library they prefer to use. This can lead to one of the following non-ideal scenarios:\n\n1. No logging in the released code (typically what you see in most modules, currently)\n2. Logging using the most simplistic tools that don't support varying logging levels\n3. Chaos, when each module does extensive logging, but using completely differing libraries.\n\nOther platforms have solved the problem of logging in elegant ways. Metalogger is an attempt to integrate that experience \ninto Node.js and achieve seamless logging experience.\n\nThe metalogger module is a very lightweight bridge/wrapper for a number of popular logging implementations: \n[npmlog](https://github.com/isaacs/npmlog), \n[log](https://github.com/visionmedia/log.js), [util](http://nodejs.org/api/util.html). A node.js module that \nuses the metalogger library can choose which logging implementation to use at runtime.\n\nUsage of Metalogger is not limited to just standalone modules. Full-blown Node applications will also benefit from \nusing Metalogger to ensure that a switch-over to a different logging implementation won't be a hassle, if and when needed.\n\n## Installation and Initialization\n\nInstall:\n\n```bash\nnpm install metalogger\n```\n\nInitialization: \n\n```javascript\nvar log = require('metalogger')(plugin, level);\n```\n\nWhere the arguments of the initialization are:\n\n1. `plugin`: short name of the implemented logging plugin. Current implementations include:  ('util', 'npmlog', 'log'). If you\n   skip this value or pass `null`, it will default to the value of the environmental variable NODE_LOGGER_PLUGIN\n\n    Full current list can be checked, at runtime, by issuing: \n    \n    ```javascript\n      log.loggers();\n    ```\n    \n1. `level`: name of the default threshold logging level. If you\n   skip this value or pass `null`, it will default to the value of the environmental variable NODE_LOGGER_LEVEL\n\n    Current list of allowed level names can be retrieved by issuing:\n\n    ```\n      log.levels();\n    ```    \n    \n    As of this writing the list of the supported levels mirrors that of syslog (and log.js) and is as \n    follows (in decreasing criticality):\n    \n- __EMERGENCY__  system is unusable\n- __ALERT__ action must be taken immediately\n- __CRITICAL__ the system is in critical condition\n- __ERROR__ error condition\n- __WARNING__ warning condition\n- __NOTICE__ a normal but significant condition\n- __INFO__ a purely informational message\n- __DEBUG__ messages to debug an application\n\n## Filename and Line Number Display\n\nFor increased debugging comfort Metalogger automatically displays the filename and line number where a log\nmessage is fired at. This is typically very handy in development. If you wish to disable this in production, however\nset the environment variable `NODE_LOGGER_SHOWLINES` to 0 or any value that is not 1.\n\n## Usage\n\nThe great value of metalogger is in unifying (to the level that it makes sense) the usage of various loggers. \nEven though the first three implemented loggers (util, npmlog, log) are quite different, metalogger manages \nto bridge these differences.\n\nAs a best practice, you shouldn't set plugin and/or level values when initializing metalogger from your re-usable modules. \nIf not set, these values will default to NODE_LOGGER_PLUGIN and NODE_LOGGER_LEVEL environmental variables, \nallowing the main application to control desired logging universally. \n\nInitialize metalogger, in your modules, as follows:\n\n```javascript\n  var log = require('metalogger')();\n```\n\nafter which you can use one of the following syntaxes, regardless of the underlying logging plugin.\n\n#### Simple Syntax:\n\nIn the simple syntax, you can just pass some message (or a javascript object, which will be properly expanded/serialized):\n```javascript\nlog.info(message);\n```\n\n#### Using a caption:\n\nCaptioned syntax is very useful for debugging object. You can provide the title for the object in caption and\npass your Javascript object as the second argument. Metalogger will automatically expend the object for you and\ndisplay it as a JSON representation.\n```javascript\nlog.debug(\"User object:\", user);\n```\n\n#### Advanced Syntax\n\nIn the advanced syntax, you can use caption (first argument), format (second argument) and unlimited number of \nvalue-arguments to construct a complex expressions:\n\n```javascript\nlog.debug(\"Caption: \", \"Formatted sequence is string: %s, number: %d, number2: %d\", somestring, somenumber, othernumber);\n```\nthe format syntax follows the semantics of [util.format](http://nodejs.org/api/util.html#util_util_inspect_object_options)\n\n### Granular Logging\n\nGlobal logging level can be overriden on a per-file basis. This can be extremely useful when you are \ndebugging or developing a specific module and want to use granular logging for it, but want to turn off \nthe noise from the rest of the modules.\n\nTo override global logging level for a specific file, you set an environment variable as follows:\n\nLet's assume you would like to turn logging level to 'debug' for a file: `lib/models/user.js', you set an environmental\nvariable as follows (example for Linux):\n\n```\nexport NODE_LEVEL_lib_models_user_js='debug'\n```\n\nPlease note that since Linux shell doesn't allow dots or slashes in a variable name, you have to replace those \nwith underscores.\n\nPath to file must be indicated from the current folder of the node process.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/publicmediaplatform/metalogger/issues"
  },
  "_id": "metalogger@0.1.9",
  "dist": {
    "shasum": "880787ffe6de064696ec69f4041523b17e5d4ec5"
  },
  "_from": "metalogger@*",
  "_resolved": "https://registry.npmjs.org/metalogger/-/metalogger-0.1.9.tgz"
}
